name: Linting and Static Analysis

#run php lint, phpstan, eslint, and pylint on any push or a PR to master
on:
    push:
    pull_request:
        branches: [ master ]
jobs:
    #cache from npm or setup node first then run eslint
    eslint:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: site
        steps:
            - uses: actions/checkout@v2
            - name: Cache Node Modules
              uses: actions/cache@v2
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-cache-node-modules-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                       ${{ runner.os }}-cache-node-modules-
            - run: npm install
            - name: Run eslint
              run: npm run lint
    php-static:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: site
        steps:
            - uses: actions/checkout@v2
            - name: Cache Composer
              id: composer-cache
              uses: actions/cache@v2
              with:
                  path: vendor
                  key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-php-

            - name: Install php dependencies
              if: steps.composer-cache.outputs.cache-hit != 'true'
              run: composer install --prefer-dist --dev

            - name: Run php linting and static analysis
              run : |
                  php vendor/bin/phpcs --standard=tests/ruleset.xml
                  php vendor/bin/phpstan analyze app
    php-unit:
      runs-on: ubuntu-latest
      defaults:
          run:
              working-directory: site
      steps:
         #TODO figure out how to share steps between composer installs instead of copying and pasting
          - uses: actions/checkout@v2
          - name: Cache Composer
            id: composer-cache
            uses: actions/cache@v2
            with:
                path: vendor
                key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
                restore-keys: |
                    ${{ runner.os }}-php-

          - name: Install php dependencies
            run: composer install --prefer-dist --dev

          - name: Run php unit tests
            run : php vendor/bin/phpunit --configuration tests/phpunit.xml

    python-lint:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - name: Cache Pip
          uses: actions/cache@v2
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            restore-keys: |
                ${{ runner.os }}-pip-
        - name: Install python libraries
          run : |
            python3 -m pip install --upgrade pip
            python3 -m pip install flake8 flake8-bugbear
        - name: Run python linting
          run : flake8

      python-lint:
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v2
          - name: Cache Pip
            uses: actions/cache@v2
            with:
              path: ~/.cache/pip
              key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
              restore-keys: |
                  ${{ runner.os }}-pip-
          - name: Install python libraries
            run : |
              python3 -m pip install --upgrade pip
              python3 -m pip install SQLAlchemy jsonschema
          - name: Run migrator python unit tests
            run : |
              pushd migrations
              python3 -m unittest discover
              popd
          - name: Run autograding python unit tests
            run : |
              pushd autograding
              python3 -m unittest discover
              popd
          - name: Run python_submitty_utils python unit tests
            run : |
              pushd python_submitty_utils
              python3 -m unittest discover
              popd




