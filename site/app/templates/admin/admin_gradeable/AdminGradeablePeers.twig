<fieldset>
    <legend>Upload a csv file dictating grader-student pairs for peer grading. The csv file must contain a labelled 'student' column and a 'grader' column:</legend>
    <label for="peer_graders_list">Select CSV file to upload for grader-student pairs</label>
    <input type="file" name="peer_graders_list" id="peer_graders_list">

    </br>
     <div id="peer_loader" class="loader hide"></div>
        <div class="table-wrapper">
            <table id="peer-table" class="table table-striped mobile-table directory-table">
                <thead>
                    <tr>
                        <th>Grader</th>
                        <th>Students</th>
                        <th>Edit Students</th>
                    </tr>
                </thead>
                <tbody>
                    {% for key,value in peer_grader_pairs %}
                        <tr>
                            <td class="peer-table-grader">{{key}}</td>
                            <td class="peer-table-students">
                                {% for entry in value %}
                                    <span>{{entry}} </span>
                                {% endfor %}
                            </td>
                            <td>
                                <a aria-label="edit {{key}}'s students"><i class="fas fa-pencil-alt"></i></a>
                            </td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        <div id="add-grader-btn-container" class="btn-container">
            <input type="button" name="add-peer-grader" class="btn btn-primary key_to_click" id="add-peer-grader" tabindex="0" value="Add New Grader to Matrix"></input>
        </div>
        </div>
            <div class="btn-container" >
            <input type="text" id="number_to_peer_grade" placeholder="Enter Number of Students to Grade">
            <input type="button" name="random-peer-graders-list" class="btn btn-primary key_to_click" id="random-peer-graders-list" tabindex="1" value="Generate random assignments"></input>
        </div>
</fieldset>

<script>
    function removeGraderAlert($grader_to_edit) {
        $('#students-to-edit').empty();
        $('#students-to-add').empty();
        $('#removed-all').append('Grader ' + $grader_to_edit + ' and their students have been removed from the Peer Matrix. Press Submit to save changes.<br><br>');
    }

    function removeStudent(i, $grader_to_edit) {
        var form = $("#admin-gradeable-peers-form");
        $('#edit_user_id_'+i+'', form).remove();
    }

    /**
    * Add new autofill text input area for new student when the user presses 
    * the '+Add More Users' button on a peer matrix popup
    *
    * @param {String} form_name the ID of form on which to add text input area
    * @param {String} students_div_name the ID of the form's student div to add to
    */
    function addStudentTextbox(form_name, students_div_name) {
        let form = $(form_name);
        let add_students_div = $(students_div_name);
        let student_autofill = JSON.parse($('#student-autofill').val());
        let j = $('.add_user_ids').length;
        $('#add_student_button', form).remove();
        add_students_div.append('<input class="add_user_ids" type="text" name="add_user_id_'+j+'" /><br>');
        $('[name="add_user_id_'+j+'"]', form).autocomplete({
            source: student_autofill
        });
        $('[name="add_user_id_'+j+'"]').autocomplete( "option", "appendTo", form );
        add_students_div.append('<p id="add_student_button" style="cursor: pointer;" onclick="addStudentTextbox(\''+form_name+'\',\''+students_div_name+'\');" aria-label="Add More Users"><i class="fas fa-plus-square"></i>Add More Users<br></p>');
    }

    /**
    * Creates the popup for editing student's peer assignments when user clicks
    * on the edit student pencil icon from peer matrix.
    *
    * @param {<i> element} icon_clicked the <i> element in peer matrix table 
    *     containing the clicked pencil icon
    */
    function adminGradeablePeerForm(icon_clicked) {
        //make admin peers popup appear
        $('.popup-form').css('display', 'none');
        let form = $("#admin-gradeable-peers-form");
        form.css("display", "block");
        captureTabInModal("admin-gradeable-peers-form");
        $('#admin-gradeable-peers-submit').prop('disabled', false);
        //set the title for popup
        let grader_to_edit = icon_clicked.parents('tr').find('.peer-table-grader').text();
        let title_div = $("#admin-gradeable-peers-title");
        title_div.empty();
        title_div.append('Edit Students for ' + grader_to_edit);
        //set the left panel to list all current students to edit
        let peer_grader_pairs = JSON.parse($('#peer-grader-pairs').val());
        let len = peer_grader_pairs[grader_to_edit].length;
        let curr_students_div = $("#students-to-edit");
        curr_students_div.empty();
        curr_students_div.append("Edit Current Students:<br />")
        for (var i = 0; i < len; i++) {
            curr_students_div.append('<p class="edit_user_ids" id="edit_user_id_' + i + '"><input class="readonly peerstudents" type="text" name="edit_user_id_' + i + '" readonly="readonly" value="' + peer_grader_pairs[grader_to_edit][i] + '" /> <input id="remove_student_'+i+'" class="btn btn-danger" value="Remove" readonly="readonly" onclick="removeStudent('+i+',\''+grader_to_edit+'\');" style="cursor:pointer; width:80px; padding-top:3px; padding-bottom:3px;" aria-hidden="true"></input><br /></p>');
        }
        //set right panel to allow removing grader completely
        $('#removed-all').empty();
        let add_students_div = $("#students-to-add");
        add_students_div.empty();
        add_students_div.append("Remove Grader:<br />");
        add_students_div.append('<input class="readonly peerstudents" type="text" readonly="readonly" value="' + grader_to_edit + '" /> <input id="remove_grader" class="btn btn-danger" value="Remove" readonly="readonly" onclick="removeGraderAlert(\''+grader_to_edit+'\')" style="cursor:pointer; width:80px; padding-top:3px; padding-bottom:3px;" aria-hidden="true"></input><br><br>');
        //set the right panel to allow adding new students
        add_students_div.append("Add New Students:<br />")
        let student_autofill = JSON.parse($('#student-autofill').val());
        add_students_div.append('<input class="add_user_ids" type="text" name="add_user_id_0" /><br>');
        $('[name="add_user_id_0"]', form).autocomplete({
            source: student_autofill
        });
        $('[name="add_user_id_0"]').autocomplete( "option", "appendTo", form );
        add_students_div.append('<p id="add_student_button" style="cursor: pointer;" onclick="addStudentTextbox(\'#admin-gradeable-peers-form\',\'#students-to-add\');" aria-label="Add More Users"><i class="fas fa-plus-square"></i>Add More Users<br></p>');  
    }

    function checkNewStudentsValid(grader_id, user_input, valid_students, new_grader) {
        // check if the newly inputed student is a valid student in the database
        let student_autofill = JSON.parse($('#student-autofill').val());
        let valid_user_ids = student_autofill.map(tmp => tmp['value']);
        let valid_entry = valid_user_ids.includes(user_input.val());
        // check if the newly inputed student is already a student for grader
        // this is automatically false when adding a new grader
        let student_pairs = JSON.parse($('#peer-grader-pairs').val());
        let already_exists = !new_grader && student_pairs[grader_id].includes(user_input.val());
        // the newly inputed student cannot be the grader themself
        let self_grading = grader_id === user_input.val();
        // if all 3 above conditions are met, allow user to press submit
        let index = Number(user_input.attr('name').substr(12));
        if (user_input.val() == '') {
            valid_students[index] = undefined;
        } else if (valid_entry && !already_exists && !self_grading) {
            valid_students[index] = true;
        } else {
            valid_students[index] = false;
        }
    }

    function submitFormAjax() {
        let url = $('#peers-submit-url').val();
        let form = $("#admin-gradeable-peers-form");
        let grader_id = $("#admin-gradeable-peers-title").text().substr(18);
        let fd = new FormData();
        fd.append('csrf_token', $("#csrf-token").val());
        fd.append('grader_id', grader_id);
        fd.append('remove_grader', $('#removed-all').text());
        let curr_student_ids = [];
        $(".edit_user_ids :input.peerstudents").each(function() {
            if ($(this).val() != "") curr_student_ids.push($(this).val());
        });
        fd.append('curr_student_ids', JSON.stringify(curr_student_ids));
        // set to check for duplicate user entries
        let add_student_ids = new Set();
        $(".add_user_ids").each(function() {
            if ($(this).val() != "") add_student_ids.add($(this).val());
        });
        fd.append('add_student_ids', JSON.stringify(Array.from(add_student_ids)));
        $.ajax({
            url: url,
            type: "POST",
            data: fd,
            processData: false,
            cache: false,
            contentType: false,
            success: function(data) {
                $('.popup-form').css('display', 'none');
                window.location.reload(false);
            },
            error: function(err) {
                console.error(err);
                window.alert("Something went wrong. Please try again.");
            }
        });
    }

    /**
    * Creates the popup for adding a new grader to the peer matrix. Triggered when
    * the user presses the "Add New Grader to Matrix" button.
    */
    function addGraderPeerForm() {
        // make add grader popup appear
        $('.popup-form').css('display', 'none');
        let form = $("#admin-gradeable-peers-form2");
        form.css("display", "block");
        $('#admin-gradeable-peers2-submit').prop('disabled', true);
        captureTabInModal("admin-gradeable-peers-form2");
        // set the left panel to allow a new grader to be added
        let peer_grader_pairs = JSON.parse($('#peer-grader-pairs').val());
        let add_grader_div = $("#new-grader");
        add_grader_div.empty();
        add_grader_div.append("Grader to Add:<br />")
        add_grader_div.append('<input type="text" id="new_peer_grader" name="new_peer_grader" /><br>');
        let student_autofill = JSON.parse($('#student-autofill').val());
        $('[name="new_peer_grader"]', form).autocomplete({
            source: student_autofill
        });
        $('[name="new_peer_grader"]').autocomplete( "option", "appendTo", form ); 
        // set the right panel to allow adding students for the new grader
        let grader_students_div = $("#new-grader-students");
        grader_students_div.empty();
        grader_students_div.append("Students for New Grader:<br />")
        grader_students_div.append('<input class="add_user_ids" type="text" name="add_user_id_0" /><br>');
        $('[name="add_user_id_0"]', form).autocomplete({
            source: student_autofill
        });
        $('[name="add_user_id_0"]').autocomplete( "option", "appendTo", form );
        grader_students_div.append('<p id="add_student_button" style="cursor: pointer;" onclick="addStudentTextbox(\'#admin-gradeable-peers-form2\',\'#new-grader-students\');" aria-label="Add More Users"><i class="fas fa-plus-square"></i>Add More Users<br></p>');
    }

    function checkNewGraderValid(user_input) {
        // check if the new grader is a valid student by autofill
        let student_autofill = JSON.parse($('#student-autofill').val());
        let valid_user_ids = student_autofill.map(tmp => tmp['value']);
        let valid_entry = valid_user_ids.includes(user_input.val());
        // check that the new grader is not already a grader in the peer matrix
        let existing_graders = [];
        $(".peer-table-grader").each(function(i, selected) {
            existing_graders[i] = $(selected).text();
        });
        let new_grader = !existing_graders.includes(user_input.val());
        // if both above conditions are met, allow user to submit
        return (valid_entry && new_grader);
    }

    function updateSubmitButton(valid_grader, valid_students, button_id, new_grader) {
        // check that the grader is valid, all new students entered are valid, and 
        // that there's at least one new student added if adding new grader
        if (valid_grader && !valid_students.includes(false) && (!new_grader || valid_students.includes(true))) {
            $(button_id).prop('disabled', false);
        } else {
            $(button_id).prop('disabled', true);
        }
    }

    function submitFormAjax2() {
        let url = $('#peer-grader-submit-url').val();
        let form = $("#admin-gradeable-peers-form2");
        let fd = new FormData();
        let csrf_token = $("#csrf-token2", form).val();
        fd.append('csrf_token', csrf_token);
        let new_grader_id = $(":text#new_peer_grader", form).val();
        fd.append('new_grader_id', new_grader_id);
        // set to check for duplicate user entries
        let add_student_ids = new Set();
        $(".add_user_ids", form).each(function() {
            if ($(this).val() != "") add_student_ids.add($(this).val());
        });
        let add_student_ids_arr = JSON.stringify(Array.from(add_student_ids));
        fd.append('add_student_ids', add_student_ids_arr);
        $.ajax({
            url: url,
            type: 'POST',
            data: fd,
            processData: false,
            contentType: false,
            success: function(data) {
                $('.popup-form').css('display', 'none');
                window.location.reload(false);
            },
            error: function(err) {
                console.error(err);
                window.alert("Something went wrong. Please try again.");
            }
        });
    }

    $(document).ready(function() {
        let valid_grader = false;
        let valid_students = [];
        $("#peer-table").on("click", ".fa-pencil-alt", function() {
            adminGradeablePeerForm($(this));
            valid_grader = true;
            valid_students = [];
        });
        $('#admin-gradeable-peers-form').on('blur change', ":text.add_user_ids", function() {
            let grader_id = $("#admin-gradeable-peers-title").text().substr(18);
            checkNewStudentsValid(grader_id, $(this), valid_students, false);
            updateSubmitButton(valid_grader, valid_students, "#admin-gradeable-peers-submit", false);
        });
        $('#add-grader-btn-container').on("click", ".btn", function() {
            addGraderPeerForm();
            valid_grader = false;
            valid_students = [];
        });
        $('#admin-gradeable-peers-form2').on('blur change', ':text#new_peer_grader', function() {
            valid_grader = checkNewGraderValid($(this));
            updateSubmitButton(valid_grader, valid_students, "#admin-gradeable-peers2-submit", true);
        });
        $('#admin-gradeable-peers-form2').on('blur change', ':text.add_user_ids', function() {
            let grader_id = $(":text#new_peer_grader").val();
            checkNewStudentsValid(grader_id, $(this), valid_students, true);
            updateSubmitButton(valid_grader, valid_students, "#admin-gradeable-peers2-submit", true);
        });
    });
</script>