<div class="electronic_file">
    <b>
		<div class="option-title">Choose an autograding configuration:</div>
		<p> Type in the full path to a configuration file, or select from the list below. </p>
	</b>

    <fieldset>
		<input class="config_search ignore" type="text" id="config_search" list="path_data"
			autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" style="width: 700px;" />
			
		<datalist id="path_data">
		{% for path in all_config_paths %}
			<option name="path_autofill_option" id="{{path.0}}" data-value="{{path.1}}">{{path.0}}</option>
		{% endfor %}
		</datalist>
		
		<a class="btn btn-primary" style="margin-top: 6px" href="{{ upload_config_url }}">Upload a custom autograding configuration</a>
		<br /><br />
        <p><label for="input_provide_full_path">Full path to autograding configuration for current selection:</label></p>
			<input style='width: 83%' type='text' id='input_provide_full_path' name='autograding_config_path' value="{{ gradeable.getAutogradingConfigPath() }}" class="required" placeholder="(Required)" {{'disabled'}}/>
    </fieldset>

    <div class="btn-container">
        <input type="button" class="btn btn-default" id="show-advanced-student-permissions" value="Show Student Permission Settings" onclick="showAdvancedStudentPermissions()">
        <span id="hide-advanced-student-permissions-container" hidden><input type="button" class="btn btn-primary student_permissions" value="Hide Student Permission Settings" onclick="hideAdvancedStudentPermissions()"></span>
    </div>
    <div class="student_permissions" hidden>
        <fieldset>
            <div>
                What are students allowed to do?
            </div>
            <div>
                View the gradeable on the course home page and download submitted files?
                <input type="radio" id="no_student_view_after_grades" name="student_view_after_grades" value="false"
                        {{ gradeable.isStudentView() and not gradeable.isStudentViewAfterGrades() ? 'checked' : '' }}/> Yes
                <input type="radio" id="no_student_view" name="student_view" value="false"
                        {{ not gradeable.isStudentView() ? 'checked' : '' }}/> No
                <input type="radio" id="yes_student_view_after_grades" name="student_view_after_grades" value="true"
                        {{ gradeable.isStudentView() and gradeable.isStudentViewAfterGrades() ? 'checked' : '' }}/> When grades are released

                <input type="radio" id="yes_student_view" name="student_view" value="true"
                        {{ gradeable.isStudentView() ? 'checked' : '' }} hidden/>
            </div>

            <div id="student_submit_view">
                <div>
                    Make new submissions and access all prior versions?
                    <input type="radio" id="yes_student_submit" name="student_submit" value="true"
                            {{ gradeable.isStudentSubmit() ? 'checked' : '' }}/> Yes
                    <input type="radio" id="no_student_submit" name="student_submit" value="false"
                            {{ not gradeable.isStudentSubmit() ? 'checked' : '' }}/> No
                </div>
            </div>
        </fieldset>
    </div>
    <div class="btn-container">
        <a class="btn btn-primary" href="{{ core.buildUrl({ 'component': 'admin', 'page': 'admin_gradeable', 'action': 'rebuild_assignment', 'id': gradeable.getId() }) }}">Rebuild Gradeable (only necessary if you have modified your custom configuration files)</a>
    </div>
    <div class="log-container">
        <div class="option-title">Build log:</div>
        {% if build_script_output is null or build_script_output is empty %}
            <pre>There is currently no build output.</pre>
        {% else %}
            <pre>{{ build_script_output|raw }}</pre>
        {% endif %}
    </div>

    <div class="log-container">
        <div class="option-title">CMake output:</div>
        {% if cmake_output is null or cmake_output is empty %}
            <pre>There is currently no cmake output.</pre>
        {% else %}
            <pre>{{ cmake_output|raw }}</pre>
        {% endif %}
    </div>

    <div class="log-container">
        <div class="option-title">Make output:</div>
        {% if make_output is null or make_output is empty %}
            <pre>There is currently no make output.</pre>
        {% else %}
            <pre>{{ make_output|raw }}</pre>
        {% endif %}
    </div>

</div>

<script type="text/javascript">
    function onPdfChange() {
        if($('#yes_pdf_page').is(':checked')) {
            // $('#pdf_page').show();
            // $('.pdf_page_input').show();
            disableElementChildren('#pdf_page', false);
            disableElementChildren('.pdf_page_input', $('#yes_pdf_page_student').is(':checked'));
        }
        else {
            // $('#pdf_page').hide();
            // $('.pdf_page_input').hide();
            disableElementChildren('#pdf_page', true);
            disableElementChildren('.pdf_page_input', true);
        }
    }
	
	function getConfigData() {
		var names = [];
		var paths = [];
		
		$("[name='path_autofill_option']").each(function() {
			names.push($(this).attr("id"));
			paths.push($(this).attr("data-value"));
		});
		
		return [names,paths];
	}

    function onConfigPathChange() {
		data=getConfigData();
	    let full_path_obj = $('#input_provide_full_path');
		let current_val = $('#config_search').val();
		
		//if a name is entered change to the path
		if (current_val != ""){
			let index=-1;
			for (i=0; i<data[0].length; i++) {
				if (current_val == data[0][i]) {
					index = i;
				}
			}
			if (index != -1) {
				current_val = data[1][index];
			}
 			full_path_obj.val(current_val);
			full_path_obj.change();
		}
		
		//if path matches display the name
		for (i=0; i<data[1].length; i++) {
			if (full_path_obj.val() == data[1][i]) {
				$('#config_search').val(data[0][i]);
				return;
			}
		}
		$('#config_search').val(full_path_obj.val());
    }

    function onStudentViewChange() {
        if($('#yes_student_view').is(':checked')) {
            //$('#student_submit_download_view').show();
            disableElementChildren('#student_submit_view', !$('#no_student_view_after_grades').is(':checked'));
        }
        else {
            // $('#student_submit_download_view').hide();
            disableElementChildren('#student_submit_view', true);
            let studentSubmit = $('#no_student_submit');

            studentSubmit.prop('checked', true);
            studentSubmit.change();

            $('input[name=student_view_after_grades]').prop('checked', false);
        }
    }

    function onStudentSubmitChange() {
        let cont = $('#due_date_options_container');

        let no_due_date = $('#has_due_date_no');
        if($('#yes_student_submit').is(':checked')) {
            cont.show();
        } else {
            no_due_date.prop('checked', true);
            cont.hide();
        }
        no_due_date.change();
    }

    function showAdvancedStudentPermissions() {
        $('.student_permissions').show();
        $('#hide-advanced-student-permissions-container').show();
        $('#show-advanced-student-permissions').hide();
    }

    function hideAdvancedStudentPermissions() {
        $('.student_permissions').hide();
        $('#hide-advanced-student-permissions-container').hide();
        $('#show-advanced-student-permissions').show();
    }

    $(document).ready(function() {

        // Hide PDF settings if not in use
        onPdfChange();
        $('[name="pdf_page"]').change(onPdfChange);

        // Hide PDF pages in Rubric if students assign them
        $('[name="pdf_page_student"]').change(onPdfChange);

        // Only show the settings if the setting is enabled
        onStudentViewChange();
        $('[name="student_view"]').change(onStudentViewChange);

        // Only show the dates if the setting is enabled
        onStudentSubmitChange();
        $('[name=student_submit]').change(onStudentSubmitChange);

        // Update the text box when the path config changes
		onConfigPathChange();
        $('#config_search').change(onConfigPathChange);

        $('input[name=student_view_after_grades]').change(function() {
            let elem = $('#yes_student_view');
            elem.prop('checked', true);
            elem.change();
            let sub = $('#no_student_submit');
            sub.prop('checked', true);
            sub.change();
        });

        {% if is_in_rebuild_queue %}
            checkRefreshPage("{{ check_refresh_url|raw }}");
        {% endif %}
    });
</script>
