<script>
  //Get the list of queue_codes
  var current_queues = [{% for queue in viewer.getAllQueues() %}
      "{{queue['code']}}",
    {% endfor %}]
  current_queues = Array.from(new Set(current_queues));
  current_queues = current_queues.map(function(x) {
    return x.toUpperCase()
  })

  //checks if the filter settings are in local storage
  if (!localStorage.getItem('office_hour_queue_filters')) {
    localStorage.setItem('office_hour_queue_filters', "{}");
  }

  var timers = []; //keep track of the current running timers on the page

  //Runs the function that gets and fills in the old filter settings
  filterQueues();
  //Unide the checkboxes now that they have been set
  $(".page_loading").removeClass("page_loading");

  //Run this every time a checkbox has been clicked to update the list of filtered queues
  function updateQueueFilter(queue_code) {
    var filters = JSON.parse(localStorage.getItem('office_hour_queue_filters'))
    filters[queue_code] = document.getElementById('queue_filter_' + queue_code).checked;
    localStorage.setItem('office_hour_queue_filters', JSON.stringify(filters));
    filterQueues();
  }

  //Goes through the filter settings from local storage Hides and unhides rows of the queue based on the filter settings
  function filterQueues() {
    var filter_choices = JSON.parse(localStorage.getItem('office_hour_queue_filters'))
    for (var i = 0; i < current_queues.length; i++) {
      if (filter_choices[current_queues[i]] != false) {
        $("#queue_filter_" + current_queues[i]).prop("checked", true);
        filter_choices[current_queues[i]] = true;
      }
    }
    localStorage.setItem('office_hour_queue_filters', JSON.stringify(filter_choices));

    timers = []
    for (var index in Object.keys(filter_choices)) {
      let key = Object.keys(filter_choices)[index];
      if (filter_choices[key]) {
        let current_element = $(".queue_current_" + key);

        current_element.addClass("shown_queue_row");

        current_element.show();
        timer = current_element.find(".help_timer")
        if (timer) {
          timers.push([
            timer,
            new Date(timer.attr("help_time"))
          ]);
        }

      } else {
        let current_element = $(".queue_current_" + key);
        current_element.hide();
        current_element.removeClass("shown_queue_row");
      }
    }
    updateTimers();

    var queue_rows = document.getElementsByClassName('shown_queue_row');
    var row_count = 0;
    for (; row_count < queue_rows.length; row_count++) {
      queue_rows[row_count].childNodes[1].innerHTML = row_count + 1;
    }
    if (queue_rows.length === 0) {
      $("#queue_empty_msg").show();
    } else {
      $("#queue_empty_msg").hide();
    }
  }

  function unhideId(element, id) {
    element.parentElement.innerHTML = id;
  }

  //update the timers few seconds
  updateTimers();
  setInterval(updateTimers, 1000);
  function updateTimers() {
    for (var i = 0; i < timers.length; i++) {
      timer = (new Date() - timers[i][1]) / 1000
      var min = Math.floor(timer / 60)
      var sec = Math.floor(timer % 60).toString().padStart(2, '0')
      var timerstring = min + ":" + sec;
      if (min >= 100) {
        timerstring = "âˆž";
      }
      timers[i][0].html(timerstring);
    }
  }

  let lastQueueEdit = {{viewer.getLastQueueUpdate()}};
  {% if viewer.isGrader() %}
    let refreshSpeed = 1000 * 30;
  {% endif %}

  setInterval(function() {
    $.get("{{base_url}}/checkUpdates", function(data) {
      if (lastQueueEdit < JSON.parse(data)['data']) {
        location.reload();
      }
    });
  }, refreshSpeed);
</script>

<style media="screen">
  .row_color_v2_0 {
    background: #c98ee4 !important;
  }
  .row_color_v2_1 {
    background: #9fcc55 !important;
  }
  .row_color_v2_2 {
    background: #ea79a1 !important;
  }
  .row_color_v2_3 {
    background: #4ed78e !important;
  }
  .row_color_v2_4 {
    background: #ef7568 !important;
  }
  .row_color_v2_5 {
    background: #38b3eb !important;
  }
  .row_color_v2_6 {
    background: #e09965 !important;
  }
  .row_color_v2_7 {
    background: #8499e3 !important;
  }
  .row_color_v2_8 {
    background: #83cc88 !important;
  }
  .row_color_v2_9 {
    background: #d9ab39 !important;
  }
  .row_color_v2_10 {
    background: #4ddcc0 !important;
  }
  .row_color_v2_11 {
    background: #b9c673 !important;
  }
  .row_color_v2_12 {
    background: #658bfb !important;
  }
  .row_color_v2_13 {
    background: #76cc6c !important;
  }
  .row_color_v2_14 {
    background: #dc8b3d !important;
  }
  .row_color_v2_15 {
    background: #c9bf5d !important;
  }
  .row_color_v2_16 {
    background: #5499f0 !important;
  }
  .row_color_v2_17 {
    background: #9a89f0 !important;
  }
  .row_color_v2_18 {
    background: #e57fcf !important;
  }
  .row_color_v2_19 {
    background: #c0c246 !important;
  }

  /* Hides elements on the page before they have been fully loaded */
  .page_loading {
    visibility: hidden;
  }

  .button-padding {
    padding-left: 1rem !important;
    padding-right: 1rem !important;
  }

  /*
    This will hide elements on phones. This is useful for extra content that
    is not normally needed such as a user id
 */
  @media only screen and (max-width: 479px) {
    /* Put this on elements you dont need on mobile */
    .mobile-hide {
      display: none !important;
    }
  }
  /* Put this on elements you dont need on desktop */
  @media only screen and (min-width: 480px) {
    .desktop-hide {
      display: none !important;
    }
  }
</style>
</div>
