

{% macro renderNotebook(notebook, testcase_messages, image_data, numberUtils, student_id, gradeable_id, highest_version, max_file_uploads, old_files) %}
<div class="notebook">

    {# Render content #}
    {% set num_short_answer = 0 %}
    {% set num_multiple_choice = 0 %}
    {% set num_file_submissions = 0 %}
    {% for cell in notebook %}
        <div id="content_{{ loop.index0 }}">

            {# Handle if cell is markdown #}
            {% if cell.type == "markdown" %}

                {# Render markdown #}
                {{ cell.markdown_data | markdown }}
                {{ _self.render_testcase_messages(cell, testcase_messages) }}

            {# Handle if cell is image #}
            {% elseif cell.type == "image" %}

                <img src="{{ attribute(image_data, cell.image) }}"

                {% if cell.width > 0 %}
                    width="{{ cell.width }}"
                {% endif %}

                {% if cell.height > 0 %}
                    height="{{ cell.height }}"
                {% endif %}

                {% if cell.alt_text is defined %}
                    alt="{{ cell.alt_text }}"
                {% endif %}

                >

                {{ _self.render_testcase_messages(cell, testcase_messages) }}

            {# Handle if cell is short_answer #}
            {% elseif cell.type == "short_answer" %}

                <div>
                    {% if cell.label %}
                        {{ cell.label | markdown }}
                    {% else %}
                        Write your {{ cell.programming_language | title }} below.  Press TAB to indent. Press ESC to advance from answer area.
                    {% endif %}
                </div>

                <div class="short-answer"
                     id="short-answer-{{ num_short_answer }}"
                     data-index="{{ num_short_answer }}"
                     data-initial="{{ cell.initial_value }}"
                     data-recent="{{ cell.recent_submission }}"
                     data-selected=""
                     data-language="{{ cell.codemirror_mode }}"
                     data-rows="{{ cell.rows }}"
                ></div>

                {{ _self.render_buttons(cell, num_short_answer) }}

                {% set num_short_answer = num_short_answer + 1 %}

            {# Handle if cell is multiple choice #}
            {% elseif cell.type == "multiple_choice" %}
                {% if cell.randomize_order == true %}
                    {% set choices_indices = numberUtils.getRandomIndices(cell.choices|length, student_id, gradeable_id ) %}
                {% else %}
                    {% set choices_indices = cell.choices|keys %}
                {% endif %}

                <fieldset id="mc_field_{{ num_multiple_choice }}"
                          class="mc"
                          {% if cell.recent_submission is defined %}data-prev_checked="{{ cell.recent_submission }}"{% endif %}>
                    {% if cell.allow_multiple == true %}
                        <legend>
                            {% if cell.label %}
                                {{ cell.label | markdown }}
                            {% else %}
                                You may select many:
                            {% endif %}
                        </legend>

                        {{ _self.render_testcase_messages(cell, testcase_messages) }}

                        {% for idx in choices_indices %}
                            <label for="multiple_choice_{{ num_multiple_choice }}_{{ loop.index0 }}">

                                <input type="checkbox" class="key_to_click" tabindex="0"
                                       name="multiple_choice_{{ num_multiple_choice }}"
                                       id="multiple_choice_{{ num_multiple_choice }}_{{ loop.index0 }}"
                                       value="{{ cell.choices[idx].value }}"
                                       onclick="handle_input_keypress();"
                                />
                                {{ cell.choices[idx].description | markdown }}
                            </label>
                        {% endfor %}
                    {% else %}
                        <legend>
                            {% if cell.label %}
                                {{ cell.label | markdown }}
                            {% else %}
                                Select one:
                            {% endif %}
                        </legend>

                        {{ _self.render_testcase_messages(cell, testcase_messages) }}

                        {% for idx in choices_indices %}
                            <label for="multiple_choice_{{ num_multiple_choice }}_{{ loop.index0 }}">
                                <input type="radio" class="key_to_click" tabindex="0"
                                       name="multiple_choice_{{ num_multiple_choice }}"
                                       id="multiple_choice_{{ num_multiple_choice }}_{{ loop.index0 }}"
                                       value="{{ cell.choices[idx].value }}"
                                       onclick="handle_input_keypress();"
                                />
                                {{ cell.choices[idx].description | markdown }}
                            </label>
                        {% endfor %}
                    {% endif %}
                </fieldset>

                {{ _self.render_buttons(cell, num_multiple_choice) }}
                {% set num_multiple_choice = num_multiple_choice + 1 %}

            {% elseif cell.type == "file_submission" %}
                {% set num_file_submissions = num_file_submissions + 1 %}

                {{ _self.renderFileSubmission(max_file_uploads,num_file_submissions, old_files, cell.label) }}

                <button type="button" class="btn btn-primary 
                    sa-clear-reset" onclick="deleteFiles({{num_file_submissions}});"> 
                    Clear
                </button>

                <button type="button" 
                    onclick="populatePreviousFiles({{num_file_submissions}});"
                    class="btn btn-primary mc-recent fs-recent">Use Most Recent Submission
                </button>
            {% endif %}

        </div>

    {% endfor %}

</div>

<script>
    function populatePreviousFiles(part){
        let prev_files = {
            {% for file in old_files %}
                {{file.part}} : {'name' : '{{file.name}}', 'size' : '{{file.size}}' },
            {% endfor %}
        };


        let tgt = prev_files[part];
        if (typeof tgt === "undefined"){
            return;
        }

        deleteFiles(part);
        addLabel(tgt['name'], tgt['size'], part);
        readPrevious(tgt['name'], part);
        setUsePrevious();
    }


    $(function(){
        createArray({{ num_file_submissions }});

        {% for file in old_files %}
            addLabel('{{ file.name }}', '{{ file.size }}', {{ file.part }}, true);
            readPrevious('{{ file.name }}', {{ file.part }});
        {% endfor %}
        setUsePrevious();

        {% if old_files | length == 0 %}
            let btns = document.getElementsByClassName("fs-recent");
            for (let btn of btns){
                btn.disabled = true;
            }
        {% endif %}
    });
</script>

{% endmacro %}

{% macro render_button(cell, index, operation, message) %}
    <button type="button" class="btn btn-primary notebook-btn" data-cell_type="{{ cell.type }}" data-index="{{ index }}" data-operation="{{ operation }}">{{ message }}</button>
{% endmacro %}

{% macro render_buttons(cell, index) %}
    {{ _self.render_button(cell, index, 'initial', 'Clear') }}
    {{ _self.render_button(cell, index, 'recent', 'Use Most Recent Submission') }}
    {{ _self.render_button(cell, index, 'selected', 'Use Selected Submission') }}
{% endmacro %}

{% macro render_testcase_messages(cell, testcase_messages) %}

    {# If testcase_ref is set then attempt to display associated messages #}
    {% if cell.testcase_ref is defined %}

        {% if testcase_messages[cell.testcase_ref] is defined %}

            {% for msg in testcase_messages[cell.testcase_ref] %}
                <p class="feedback-msg-{{ msg.type }}">{{ msg.message }}</p>
            {% endfor %}

        {% endif %}

    {% endif %}

{% endmacro %}

{# File submission for notebooks #}
{% macro renderFileSubmission(max_file_uploads, index, old_files, label) %}
    <div id="upload-boxes">
        {# uploadIndex and input-file + Index required for drag-and-drop.js #}
        <div tabindex="0"
             id="upload{{index}}"
             class="upload-box"
             onkeypress="clicked_on_box(event)"
             role="text"
             aria-label="Press enter to upload your part {{ index }} file"
        >
            <h2 class="label" id="label{{index}}">
                Drag your {{ label }} file(s) here or click to open file browser
            </h2>
            <input type="file" name="files" id="input-file{{index}}" 
                   class="hide" onchange="addFilesFromInput({{index}})"
                   multiple aria-label="Select Files to upload" 
            />
            <table class="file-upload-table" id="file-upload-table-{{index}}">
            <tr style="background:transparent; display:none;">
                <th>File Name:</th>
                <th>Size:</th>
            </tr>
            </table>
            <p>Maximum allowed number of files to be uploaded is {{ max_file_uploads }}.</p>
        </div>
    </div>

    <script>
        $(function(){
            //initialize the dropzone just created
            initMaxNoFiles({{max_file_uploads}});
            initializeDropZone("upload{{ index }}");
        });
    </script>
{% endmacro %}
